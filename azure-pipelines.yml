# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  branches:
    include:
      - "*"


jobs:
- job:
  displayName: "amd64"
  variables:
    DIFF_COVER_CHECK_THRESHOLD: 80
    DIFF_COVER_ENABLE: 'true'
    DIFF_COVER_COVERAGE_FILES: linkmgrd-test-result.xml $(System.DefaultWorkingDirectory)/**/linkmgrd-test-result.xml
  pool:
    vmImage: 'ubuntu-20.04'

  container:
    image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bullseye:latest

  steps:
  - script: |
      wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
      sudo dpkg -i packages-microsoft-prod.deb
      rm packages-microsoft-prod.deb
      sudo apt-get update
      sudo apt-get install -y apt-transport-https
      sudo apt-get install -y dotnet-sdk-6.0
    displayName: install .Net
  - script: |
      sudo apt-get install -y\
          libboost-dev \
          libboost-program-options-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libboost-atomic-dev \
          libboost-chrono-dev \
          libboost-container-dev \
          libboost-context-dev \
          libboost-contract-dev \
          libboost-coroutine-dev \
          libboost-date-time-dev \
          libboost-fiber-dev \
          libboost-filesystem-dev \
          libboost-graph-parallel-dev \
          libboost-log-dev \
          libboost-regex-dev \
          libboost-serialization-dev \
          googletest \
          libgtest-dev \
          libgmock-dev \
          libhiredis0.14 \
          libhiredis-dev \
          libnl-3-dev \
          libnl-route-3-dev \
          libnl-genl-3-200 \
          libnl-nf-3-200

    displayName: "Install dependencies"
  - checkout: self
    clean: true
    submodules: true
  - script: |
      sourceBranch=$(Build.SourceBranchName)
      if [[ "$(Build.Reason)" == "PullRequest" ]];then
        sourceBranch=$(System.PullRequest.TargetBranch)
      fi
      echo "Download artifact branch: $sourceBranch"
      echo "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
    displayName: "Get correct artifact downloading branch"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage.common_libs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: $(Build.ArtifactStagingDirectory)/download
      artifact: common-lib
      patterns: |
        target/debs/bullseye/libyang-*.deb
        target/debs/bullseye/libyang_*.deb
    displayName: "Download libyang from common lib"
  - script: |
      set -ex
      sudo dpkg -i $(find ./download -name *.deb)
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install libyang from common lib"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 9
      artifact: sonic-swss-common
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: '$(Build.SourcesDirectory)/sonic-swss-common'
      allowPartiallySucceededBuilds: true
    displayName: "Download sonic swss common deb packages"
  - script: |
      sudo dpkg -i sonic-swss-common/libswsscommon_1.0.0_amd64.deb
      sudo dpkg -i sonic-swss-common/libswsscommon-dev_1.0.0_amd64.deb
    displayName: "Install sonic swss common"
  - script: |
      rm ../*.deb
      dpkg-buildpackage -us -uc -b -j$(nproc)
      cp ../*.deb $(Build.ArtifactStagingDirectory)
    displayName: "Compile sonic linkmgrd"
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: sonic-linkmgrd_1.0.0-1.amd64
    displayName: "Archive linkmgrd debian packages"
  - task: PublishCodeCoverageResults@1
    inputs:
      summaryFileLocation: linkmgrd-test-result.xml
      pathToSources: $(Build.SourcesDirectory)
      codeCoverageTool: 'Cobertura'


- job:
  displayName: "arm64"
  timeoutInMinutes: 180
  pool: sonicbld-arm64
  container:
    image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bullseye-arm64:latest

  steps:
  - script: |
      set -ex
      sudo apt-get update
      sudo apt-get install -y\
          libboost-dev \
          libboost-program-options-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libboost-atomic-dev \
          libboost-chrono-dev \
          libboost-container-dev \
          libboost-context-dev \
          libboost-contract-dev \
          libboost-coroutine-dev \
          libboost-date-time-dev \
          libboost-fiber-dev \
          libboost-filesystem-dev \
          libboost-graph-parallel-dev \
          libboost-log-dev \
          libboost-regex-dev \
          libboost-serialization-dev \
          googletest \
          libgtest-dev \
          libhiredis0.14 \
          libhiredis-dev \
          libnl-3-dev \
          libnl-route-3-dev \
          libnl-genl-3-200 \
          libnl-nf-3-200

    displayName: "Install dependencies"
  - checkout: self
    clean: true
    submodules: true
  - script: |
      sourceBranch=$(Build.SourceBranchName)
      if [[ "$(Build.Reason)" == "PullRequest" ]];then
        sourceBranch=$(System.PullRequest.TargetBranch)
      fi
      echo "Download artifact branch: $sourceBranch"
      echo "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
    displayName: "Get correct artifact downloading branch"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage.common_libs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: $(Build.ArtifactStagingDirectory)/download
      artifact: common-lib.arm64
      patterns: |
        target/debs/bullseye/libyang-*.deb
        target/debs/bullseye/libyang_*.deb
    displayName: "Download libyang from common lib"
  - script: |
      set -ex
      sudo dpkg -i $(find ./download -name *.deb)
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install libyang from common lib"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 9
      artifact: sonic-swss-common.arm64
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: '$(Build.SourcesDirectory)/sonic-swss-common.arm64'
      allowPartiallySucceededBuilds: true
    displayName: "Download sonic swss common deb packages"
  - script: |
      sudo dpkg -i sonic-swss-common.arm64/libswsscommon_1.0.0_arm64.deb
      sudo dpkg -i sonic-swss-common.arm64/libswsscommon-dev_1.0.0_arm64.deb
    displayName: "Install sonic swss common"
  - script: |
      rm ../*.deb
      dpkg-buildpackage -us -uc -b -j$(nproc)
      cp ../*.deb $(Build.ArtifactStagingDirectory)
    displayName: "Compile sonic linkmgrd"
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: sonic-linkmgrd.arm64
    displayName: "Archive linkmgrd debian packages"


- job:
  displayName: "armhf"
  timeoutInMinutes: 180
  pool: sonicbld-armhf
  container:
    image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bullseye-armhf:latest

  steps:
  - script: |
      set -ex
      sudo apt-get update
      sudo apt-get install -y \
          libboost-dev \
          libboost-program-options-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libboost-atomic-dev \
          libboost-chrono-dev \
          libboost-container-dev \
          libboost-context-dev \
          libboost-contract-dev \
          libboost-coroutine-dev \
          libboost-date-time-dev \
          libboost-fiber-dev \
          libboost-filesystem-dev \
          libboost-graph-parallel-dev \
          libboost-log-dev \
          libboost-regex-dev \
          libboost-serialization-dev \
          googletest \
          libgtest-dev \
          libhiredis0.14 \
          libhiredis-dev \
          libnl-3-dev \
          libnl-route-3-dev \
          libnl-genl-3-200 \
          libnl-nf-3-200

    displayName: "Install dependencies"
  - checkout: self
    clean: true
    submodules: true
  - script: |
      sourceBranch=$(Build.SourceBranchName)
      if [[ "$(Build.Reason)" == "PullRequest" ]];then
        sourceBranch=$(System.PullRequest.TargetBranch)
      fi
      echo "Download artifact branch: $sourceBranch"
      echo "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
    displayName: "Get correct artifact downloading branch"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage.common_libs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: $(Build.ArtifactStagingDirectory)/download
      artifact: common-lib.armhf
      patterns: |
        target/debs/bullseye/libyang-*.deb
        target/debs/bullseye/libyang_*.deb
    displayName: "Download libyang from common lib"
  - script: |
      set -ex
      sudo dpkg -i $(find ./download -name *.deb)
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install libyang from common lib"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 9
      artifact: sonic-swss-common.armhf
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(sourceBranch)'
      path: '$(Build.SourcesDirectory)/sonic-swss-common.armhf'
      allowPartiallySucceededBuilds: true
    displayName: "Download sonic swss common deb packages"
  - script: |
      sudo dpkg -i sonic-swss-common.armhf/libswsscommon_1.0.0_armhf.deb
      sudo dpkg -i sonic-swss-common.armhf/libswsscommon-dev_1.0.0_armhf.deb
    displayName: "Install sonic swss common"
  - script: |
      rm ../*.deb
      dpkg-buildpackage -us -uc -b -j$(nproc)
      cp ../*.deb $(Build.ArtifactStagingDirectory)
    displayName: "Compile sonic linkmgrd"
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: sonic-linkmgrd.armhf
    displayName: "Archive linkmgrd debian packages"


